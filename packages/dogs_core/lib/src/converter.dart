/*
 *    Copyright 2022, the DOGs authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

import "package:dogs_core/dogs_core.dart";
import "package:meta/meta.dart";

/// Base class for converters used by the [DogEngine].
/// Contains structure information about the type being serialized and provides
/// an [OperationMode] mapping for all supported operation modes.
abstract class DogConverter<T> extends TypeCapture<T> implements DogLinkable {
  /// If the converter is associated with the type [T].
  /// Used by the [DogEngine.registerAutomatic] to determine if a converter
  /// should be automatically registered to [T].
  final bool isAssociated;

  /// If the converter should keep iterables as iterables or convert them
  /// automatically if they occur inside a [DogStructure].
  final bool keepIterables;

  /// The [DogStructure] associated with this converter and the type [T].
  final DogStructure<T>? struct;

  /// Base class for converters used by the [DogEngine].
  /// Contains structure information about the type being serialized and provides
  /// an [OperationMode] mapping for all supported operation modes.
  const DogConverter(
      {this.struct,
      this.isAssociated = true,
      @Deprecated(
          "This parameter has been removed in favor of the shift towards tree based converters. "
          "This value is effectively a no-op, please remove it.")
      this.keepIterables = false});

  /// Returns the operation mode for the given [opmodeType] or null if the
  /// converter does not support the given operation mode by default.
  OperationMode<T>? resolveOperationMode(DogEngine engine, Type opmodeType) => null;

  /// Generates a [SchemaType] describing the output generated by this converter.
  ///
  /// NOTE: Do not return a shared instance of [SchemaType] as it will be modified by the
  /// visitor. For such cases, use [SchemaType.clone] to create a new instance.
  SchemaType describeOutput(DogEngine engine, SchemaConfig config) => SchemaType.any;

  @override
  void link(DogEngine engine, bool emitChanges) {
    engine.registerAutomatic(this, emitChanges);
  }
}

/// Simple converter base that only requires a [serialize] and [deserialize]
/// method. Automatically adds [NativeSerializerMode] as well as a synthetic
/// [DogStructure] with the given [SimpleDogConverter.serialName].
abstract class SimpleDogConverter<T> extends DogConverter<T> with OperationMapMixin<T> {
  /// Instantiates a new [SimpleDogConverter] with the given [serialName].
  /// Specify the [serialName] using `: super(serialName: "")`.
  SimpleDogConverter({required String serialName})
      : super(struct: DogStructure<T>.synthetic(serialName));

  @override
  Map<Type, OperationMode<T> Function()> get modes => {
        NativeSerializerMode: () => NativeSerializerMode.create(
            serializer: (value, engine) => serialize(value, engine),
            deserializer: (value, engine) => deserialize(value, engine)),
      };

  /// Serializes the given [value] to a [DogNativeCodec] native value.
  dynamic serialize(T value, DogEngine engine);

  /// Deserializes the given [value] from a [DogNativeCodec] native value.
  T deserialize(dynamic value, DogEngine engine);
}
