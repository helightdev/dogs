/*
 *    Copyright 2022, the DOGs authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

import "package:dogs_core/src/schema/spec.dart";
import "package:meta/meta.dart";

/// Visitor for [SchemaField] instances that can be used to apply custom
/// annotations and overrides to the fields autogenerated schema.
abstract class SchemaFieldVisitor {
  /// Visitor for [SchemaField] instances that can be used to apply custom
  /// annotations and overrides to the fields autogenerated schema.
  const SchemaFieldVisitor();

  /// Visit the given [SchemaField] instance.
  void visitSchemaField(SchemaField field);
}

/// Internal class to track schema passes and avoid recursion.
class SchemaPass {

  /// The current schema pass, or null if none is active.
  static SchemaPass? current;

  /// The current depth of the schema pass.
  int depth = 0;

  @internal
  // ignore: public_member_api_docs
  static T run<T>(T Function(SchemaPass) block) {
    if (current != null) {
      throw Exception("Already in a schema pass, this should not happen.");
    }
    final pass = SchemaPass();
    try {
      current = pass;
      return block(pass);
    } finally {
      current = null;
    }
  }
}
